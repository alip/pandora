<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<!--
   Copyright (c) 2011 Ali Polatel <alip@exherbo.org>

   This file is part of Pandora's Box. pandora is free software;
   you can redistribute it and/or modify it under the terms of the GNU General
   Public License version 2, as published by the Free Software Foundation.

   pandora is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
   details.

   You should have received a copy of the GNU General Public License along with
   this program; if not, write to the Free Software Foundation, Inc., 59 Temple
   Place, Suite 330, Boston, MA  02111-1307  USA
-->

<refentry id="pandora" lang="en">
  <refentryinfo>
    <title>pandora</title>
    <productname>pandora</productname>

    <authorgroup>
      <author>
        <contrib>Developer</contrib>
        <firstname>Ali</firstname>
        <surname>Polatel</surname>
        <email>alip@exherbo.org</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>pandora</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="source">pandora</refmiscinfo>
    <refmiscinfo class="manual">Pandora's Box</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>pandora</refname>
    <refpurpose>Pandora's Box</refpurpose>
  </refnamediv>

  <refsynopsisdiv id="synopsis">
    <cmdsynopsis>
      <command>pandora <arg choice="opt">-hVv</arg> <arg choice="opt" rep="repeat">-c pathspec</arg> <arg choice="opt" rep="repeat">-m magic</arg> <arg choice="req" rep="repeat">-p pid</arg></command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>pandora <arg choice="opt">-hVv</arg> <arg choice="opt" rep="repeat">-c pathspec</arg> <arg choice="opt" rep="repeat">-m magic</arg> <arg choice="opt" rep="repeat">-E var=val</arg> <arg choice="req">command <arg choice="opt" rep="repeat">arg</arg></arg></command>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1 id="description">
    <title>Description</title>

    <para>
      <command>pandora</command> is a <citerefentry><refentrytitle>ptrace</refentrytitle><manvolnum>2</manvolnum></citerefentry> based sandboxing utility for Linux.
    </para>
  </refsect1>

  <refsect1 id="options">
    <title>Options</title>

    <simpara>The following options are understood:</simpara>

    <variablelist>
      <varlistentry>
        <term><option>-h</option></term>
        <listitem><simpara>Show usage and exit</simpara></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-V</option></term>
        <listitem><simpara>Show version and exit</simpara></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-v</option></term>
        <listitem><simpara>Be verbose, may be repeated</simpara></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-c</option> <filename>pathspec</filename></term>
        <listitem>
          <simpara><filename>pathspec</filename> to the configuration file, may be repeated. See <xref linkend="configuration"/> for more information.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-m</option> <emphasis>magic</emphasis></term>
        <listitem>
          <simpara>Run a magic command during init, may be repeated. See <xref linkend="configuration"/> for more information.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 id="configuration">
    <title>Configuration</title>

    <simpara>Pandora is configured through the so-called magic commands.
    There are three ways to supply magic commands:</simpara>

    <itemizedlist>
      <listitem>
        <para>Pandora may be configured using a configuration file. The path to the configuration file is speficied
        using the <option>-c</option> command line switch or the <varname>PANDORA_CONFIG</varname> environment
        variable. More than one configuration file may be specified this way, however only the first configuration
        file can change the <emphasis>core</emphasis> configuration. If path to the configuration file is prefixed
        with "@" character, Pandora looks for this configuration file under
        <filename><varname>$sharedir</varname>/pandora/</filename> where <varname>$sharedir</varname> is usually
        <filename>/usr/share</filename>. The command line switch has precedence over the
        <varname>PANDORA_CONFIG</varname> environment variable.</para>
      </listitem>
      <listitem>
        <para>Pandora may be configured using the <option>-m</option> command line switch. This is a handy way to
        specify configuration without having to write a configuration file or modify the configuration slightly during
        each run.</para>
      </listitem>
      <listitem>
        <para>Pandora may be configured using magic
        <citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry> during runtime. This
        is achieved by calling <function>stat()</function> system call on <filename>/dev/pandora</filename> followed
        by the magic path. Note that runtime configuration is only possible if the magic lock is unset. The system
        call <function>stat()</function> was chosen as the magic call because it is both easy to implement and rather
        easy to invoke it using builtin shell commands like:
        <programlisting>test -e /dev/pandora/core/sandbox/path:true</programlisting>
        which enables path sandboxing for a shell running under Pandora. It is also possible to query boolean values
        using the return value of the magic <function>stat</function><manvolnum>2</manvolnum>:
        <programlisting>test -e '/dev/pandora/core/sandbox/path?' &amp;&amp; echo "path sandboxing on" || echo "path sandboxing off"</programlisting>
        </para>
      </listitem>
    </itemizedlist>

    <refsect2 id="command-types">
      <title>Command Types</title>

      <simpara>Every <emphasis>magic</emphasis> command has a type. The available types are listed below:</simpara>

      <variablelist>
        <varlistentry>
          <term><option>boolean</option></term>
          <listitem>
            <para>A boolean type may have one of the two values, <emphasis>true</emphasis> or
            <emphasis>false</emphasis>.  This corresponds to JSON's boolean type so to set a boolean value using the
            configuration file, use one of the above specified keywords. To specify boolean values when passing
            <emphasis>magic</emphasis> commands to Pandora, you may still use <emphasis>true</emphasis> or
            <emphasis>false</emphasis>. In addition you can use the short forms <emphasis>t</emphasis> or
            <emphasis>f</emphasis> and you can also use <emphasis>1</emphasis> or <emphasis>0</emphasis>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>integer</option></term>
          <listitem>
            <para>This type represents the basic integer type. This corresponds to JSON's integer type.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>string</option></term>
          <listitem>
            <para>This type represents the basic string type. This corresponds to JSON's string type.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>string-array</option></term>
          <listitem>
            <para>This type represents a list of strings, other types aren't allowed within this type.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="specifying-magic-commands">
      <title>Specifying Magic Commands</title>

      <para>As mentioned in the <xref linkend="configuration"/> section Pandora may be configured using the so-called magic commands.
      Format of the magic commands is simple and resembles configuration file which is JSON:
      <programlisting>${PREFIX}/section/of/option${OPERATION_CHARACTER}value</programlisting>
      where <varname>${PREFIX}</varname> is <filename>/dev/pandora</filename> by default (defined at compile-time with PANDORA_MAGIC_PREFIX).
      This prefix is only required for magic <function>stat()</function>, not for <option>-m</option> command line switch. Section of an option
      is very similar to the configuration file e.g.:
      <programlisting>{ "core" : { "log" : { "console_fd" : 2 } } }</programlisting>
      maps to:
      <programlisting>core/log/console_fd</programlisting></para>

      <simpara><varname>${OPERATION_CHARACTER}</varname> determines the operation of the magic command. Here are possible values:</simpara>

      <variablelist>
        <varlistentry>
          <term>:</term>
          <listitem><simpara>This is used to set a value, value must either be a boolean, integer or string.</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term>?</term>
          <listitem><simpara>This is used to query a boolean value.</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term>+</term>
          <listitem><simpara>This is used to append to a string array.</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term>-</term>
          <listitem><simpara>This is used to remove an element from a string array.</simpara></listitem>
        </varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="configuration-file-format">
      <title>Configuration File Format</title>

      <para>Pandora's configuration file format is JSON. All configuration is specified through one JSON object enclosed in curly braces.
      C style comments are allowed. See <xref linkend="configuration-example"/> for an example configuration file.</para>
    </refsect2>

    <refsect2>
      <title>Commands</title>

      <para>Pandora recognizes the following magic commands:</para>

      <variablelist>
        <varlistentry>
          <term><option>core/log/console_fd</option></term>
          <listitem>
            <para>type: integer</para>
            <para>An integer specifying the console log file descriptor. Defaults to 2, standard error.
            See <xref linkend="logging"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/log/file</option></term>
          <listitem>
            <para>type: string</para>
            <para>A string specifying the path to the log file. Defaults to "", no logging to file.
            See <xref linkend="logging"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/log/level</option></term>
          <listitem>
            <para>type: integer</para>
            <para>An integer specifying the level of messages to log. Log messages lower than this level are
            discarded. Defaults to 2, <option>message</option></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/log/timestamp</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether the messages should be prefixed with a timestamp.
            Defaults to <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/sandbox/exec</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether <function>execve</function><manvolnum>2</manvolnum> system call should be sandboxed.
            Defaults to <varname>false</varname>. See <xref linkend="execve-sandboxing"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/sandbox/path</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether path sandboxing should be enabled. Defaults to <varname>false</varname>.
            See <xref linkend="path-sandboxing"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/sandbox/sock</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether network sandboxing should be enabled. Defaults to <varname>false</varname>.
            See <xref linkend="network-sandboxing"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/whitelist/per_process_directories</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether per-process directories like <filename>/proc/<varname>$pid</varname></filename>
            should automatically be whitelisted. Defaults to <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/whitelist/successful_bind</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether the socket address arguments of successful
            <function>bind</function><manvolnum>2</manvolnum> calls should be whitelisted
            for <function>connect</function><manvolnum>2</manvolnum> and
            <function>sendto</function><manvolnum>2</manvolnum>. Defaults to
            <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/whitelist/unsupported_socket_families</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether unknown socket families should be allowed access when network sandboxing is on.
            Defaults to <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/abort/decision</option></term>
          <listitem>
            <para>type: string</para>
            <para>A string specifying the decision to take when tracing is aborted (i.e via <varname>SIGINT</varname>).
            Possible values are <varname>contall</varname> and <varname>killall</varname>. The former is to resume all
            traced processes. and the latter is to kill all traced processes. Default is <varname>contall</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/panic/decision</option></term>
          <listitem>
            <para>type: string</para>
            <para>A string specifying the decision to take when a panic condition like an unknown error occurs.
            Possible values are <varname>cont</varname>, <varname>kill</varname>, <varname>contall</varname> and
            <varname>killall</varname>. The first two operates on the guilty process responsible for the panic whereas
            the other two works on all processes.  <varname>Default is "kill</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/panic/exit_code</option></term>
          <listitem>
            <para>type: integer</para>
            <para>This setting specifies the exit code if
            <option>core/panic/decision</option> is one of
            <varname>contall</varname> or <varname>killall</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/violation/decision</option></term>
          <listitem>
            <para>type: string</para>
            <para>A string specifying the decision to take when an access
            violation occurs. Possible values are <varname>cont</varname>, <varname>kill</varname>, <varname>contall</varname>,
            <varname>killall</varname> and <varname>deny</varname>. Default is "deny" which means to deny the
            system call and continue execution.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/violation/exit_code</option></term>
          <listitem>
            <para>type: integer</para>
            <para>An integer specifying the exit code in case <option>core/violation/decision</option> is one of "contall", "killall".
            As a special case, if this integer is smaller than zero, pandora exits with 128 added to the eldest process' exit value.
            This special case is meant for program tests to check whether an access violation has occured using the exit code.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/violation/raise_fail</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether certain failures like errors during path resolution should be treated as
            access violations.  Note this is just for reporting, the access to the system call is still denied.
            Defaults to <varname>false</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/violation/raise_safe</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether certain violations which are considered safe should be reported.  For
            example, <function>mkdir</function><manvolnum>2</manvolnum> is a system call which fails when it can not
            create the directory. In this special case, pandora denies the system call with <varname>EEXIST</varname>
            for consistency and does not raise an access violation in case <option>core/violation/raise_safe</option>
            is set to <varname>false</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/trace/follow_fork</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether pandora should follow forks, vforks and clones. Defaults to
            <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/trace/exit_wait_all</option></term>
          <listitem>
            <para>type: boolean</para>
            <para>A boolean specifying whether all traced processes should be waited to exit before pandora exits.
            If this is <varname>false</varname>, pandora resumes all the traced processes and exits when the eldest
            process exits.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>core/trace/magic_lock</option></term>
          <listitem>
            <para>type: string</para>
            <para>A string specifying the state of the magic lock. Possible values are <varname>on</varname>,
            <varname>off</varname> and <varname>exec</varname>. If magic lock is <varname>on</varname> no magic
            commands are allowed. Note, the magic lock is tracked per process. If <varname>exec</varname> is
            specified, the magic lock is set to <varname>on</varname> when the process calls the system call
            <function>execve</function><manvolnum>2</manvolnum>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>exec/resume_if_match</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>This setting specifies a list of path patterns. If one of these patterns matches the
            resolved path of an <function>execve</function><manvolnum>2</manvolnum> system call, the process
            in question is resumed. See <xref linkend="pattern-matching"/> for more information on wildmatch
            patterns.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>exec/kill_if_match</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>This setting specifies a list of path patterns. If one of these patterns matches the
            resolved path of an <function>execve</function><manvolnum>2</manvolnum> system call, the process
            in question is killed. See <xref linkend="pattern-matching"/> for more information on wildmatch
            patterns.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>filter/exec</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of path patterns to filter for <function>execve</function><manvolnum>2</manvolnum>
            sandboxing. See <xref linkend="execve-sandboxing"/> and <xref linkend="pattern-matching"/>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>filter/path</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of path patterns to filter for path sandboxing. See
            <xref linkend="path-sandboxing"/> and <xref linkend="pattern-matching"/>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>filter/sock</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of network addresses to filter for network sandboxing. See
            <xref linkend="network-sandboxing"/> and <xref linkend="address-matching"/>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>whitelist/exec</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of path patterns to whitelist for <function>execve</function><manvolnum>2</manvolnum>
            sandboxing. See <xref linkend="execve-sandboxing"/> and <xref linkend="pattern-matching"/>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>whitelist/path</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of path patterns to whitelist for path sandboxing. See
            <xref linkend="path-sandboxing"/> and <xref linkend="pattern-matching"/>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>whitelist/sock/bind</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of network addresses to whitelist for
            <function>bind</function><manvolnum>2</manvolnum> network sandboxing. See
            <xref linkend="network-sandboxing"/> and <xref linkend="address-matching"/>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>whitelist/sock/connect</option></term>
          <listitem>
            <para>type: string-array</para>
            <para>Specifies a list of network addresses to whitelist for
            <function>connect</function><manvolnum>2</manvolnum> and
            <function>connect</function><manvolnum>2</manvolnum> network sandboxing. See
            <xref linkend="network-sandboxing"/> and <xref linkend="address-matching"/>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

  <refsect1 id="logging">
    <title>Logging</title>

    <para>Pandora has a simple logging infrastructure. There are two log targets, <option>core/log/console_fd</option>
    and <option>core/log/file</option>. Messages with severity lower than <option>core/log/level</option> are
    discarded. The rest are logged to <option>core/log/file</option> if specified and messages with log level
    higher than <option>message</option> are logged to <option>core/log/console_fd</option> as well.
    Below is a list of log levels and corresponding integers representing these levels:</para>

    <itemizedlist>
      <listitem><para>0: fatal</para></listitem>
      <listitem><para>1: warning</para></listitem>
      <listitem><para>2: message</para></listitem>
      <listitem><para>3: info</para></listitem>
      <listitem><para>4: debug</para></listitem>
      <listitem><para>5: trace</para></listitem>
    </itemizedlist>
  </refsect1>

  <refsect1 id="sandboxing">
    <title>Sandboxing</title>

    <para>There are three sandboxing types:</para>

    <orderedlist>
      <listitem><para>Path sandboxing</para></listitem>
      <listitem><para><citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry> sandboxing</para></listitem>
      <listitem><para>Network sandboxing</para></listitem>
    </orderedlist>

    <refsect2 id="path-sandboxing">
      <title>Path Sandboxing</title>

      <para>This sandboxing checks certain system calls for filesystem access.  If a system call tries to write, modify
      or change attributes of a path, this attempt is reported and the system call is denied. There are two ways to
      customize this behaviour. Pandora may be configured to "whitelist" some path patterns. If the path argument of
      the system call which is subject to be modified matches a pattern in the list of whitelisted path patterns, this
      attempt is not denied. Additionally, Pandora may be configured to "filter" some path patterns. In this case a
      match will prevent Pandora from reporting a warning about the access violation, the system call is still denied
      though.</para>

      <para>List of observed system calls are:
      <function>chmod</function><manvolnum>2</manvolnum>,
      <function>fchmodat</function><manvolnum>2</manvolnum>,
      <function>chown</function><manvolnum>2</manvolnum>,
      <function>chown32</function><manvolnum>2</manvolnum>,
      <function>lchown</function><manvolnum>2</manvolnum>,
      <function>lchown32</function><manvolnum>2</manvolnum>,
      <function>fchownat</function><manvolnum>2</manvolnum>,
      <function>open</function><manvolnum>2</manvolnum>,
      <function>openat</function><manvolnum>2</manvolnum>,
      <function>creat</function><manvolnum>2</manvolnum>,
      <function>mkdir</function><manvolnum>2</manvolnum>,
      <function>mkdirat</function><manvolnum>2</manvolnum>,
      <function>mknod</function><manvolnum>2</manvolnum>,
      <function>mknodat</function><manvolnum>2</manvolnum>,
      <function>rmdir</function><manvolnum>2</manvolnum>,
      <function>truncate</function><manvolnum>2</manvolnum>,
      <function>truncate64</function><manvolnum>2</manvolnum>,
      <function>mount</function><manvolnum>2</manvolnum>,
      <function>umount</function><manvolnum>2</manvolnum>,
      <function>umount2</function><manvolnum>2</manvolnum>,
      <function>utime</function><manvolnum>2</manvolnum>,
      <function>utimes</function><manvolnum>2</manvolnum>,
      <function>utimensat</function><manvolnum>2</manvolnum>,
      <function>futimesat</function><manvolnum>2</manvolnum>,
      <function>unlink</function><manvolnum>2</manvolnum>,
      <function>unlinkat</function><manvolnum>2</manvolnum>,
      <function>link</function><manvolnum>2</manvolnum>,
      <function>linkat</function><manvolnum>2</manvolnum>,
      <function>rename</function><manvolnum>2</manvolnum>,
      <function>renameat</function><manvolnum>2</manvolnum>,
      <function>symlink</function><manvolnum>2</manvolnum>,
      <function>symlinkat</function><manvolnum>2</manvolnum>,
      <function>setxattr</function><manvolnum>2</manvolnum>,
      <function>lsetxattr</function><manvolnum>2</manvolnum>,
      <function>removexattr</function><manvolnum>2</manvolnum>, and
      <function>lremovexattr</function><manvolnum>2</manvolnum>.
      </para>
    </refsect2>

    <refsect2 id="execve-sandboxing">
      <title>execve(2) Sandboxing</title>

      <para>This sandboxing denies <citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry>
      calls in case the path argument does not match one of the whitelisted patterns. Note, all
      <citerefentry><refentrytitle>exec</refentrytitle><manvolnum>3</manvolnum></citerefentry> family functions are sandboxed
      because these functions are just wrappers of the
      <citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry> system call.</para>
    </refsect2>

    <refsect2 id="network-sandboxing">
      <title>Network Sandboxing</title>

      <para>This sandboxing exposes a way to prevent unwanted network calls. The observed system calls are:
      <function>bind</function><manvolnum>2</manvolnum>,
      <function>connect</function><manvolnum>2</manvolnum> and
      <function>sendto</function><manvolnum>2</manvolnum>. To increase usability, these system calls are
      observed in two groups: <emphasis>bind</emphasis> and <emphasis>connect</emphasis>.
      <function>bind</function><manvolnum>2</manvolnum> belongs to the first group, whereas the other two
      system calls belong to the <emphasis>connect</emphasis> group.
      </para>
    </refsect2>
  </refsect1>

  <refsect1 id="pattern-matching">
    <title>Pattern Matching</title>

    <para>Pandora uses shell-style pattern matching for whitelists and filters. The wildmatching code is borrowed from
    rsync and behaves like:</para>

    <itemizedlist>
      <listitem>
        <para>A '*' matches any path component, but it stops at slashes.</para>
      </listitem>
      <listitem>
        <para>Use '**' to match anything, including slashes.</para>
      </listitem>
      <listitem>
        <para>A '?' matches any character except a slash (/).</para>
      </listitem>
      <listitem>
        <para>A "[" introduces a character class, such as [a-z] or [[:alpha:]].</para>
      </listitem>
      <listitem>
        <para>In a wildcard pattern, a backslash can be used to escape a wildcard character, but it is matched literally
        when no wildcards are present.</para>
      </listitem>
      <listitem>
        <para>A trailing "dir_name/***" will match both the directory (as if "dir_name/" had been specified) and
        everything  in  the  directory (as if "dir_name/**" had been specified).</para>
      </listitem>
    </itemizedlist>
  </refsect1>

  <refsect1 id="address-matching">
    <title>Address Matching</title>

    <para>Pandora has a simple address scheme to match network addresses. The addresses can be in the following
    forms:</para>

    <variablelist>
      <varlistentry>
        <term>unix:${PATTERN}</term>
        <listitem>
          <para>Specifies a UNIX socket path, <varname>${PATTERN}</varname> specifies a path pattern.
          See <xref linkend="pattern-matching"/> for more information on path patterns.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>unix-abstract:${PATTERN}</term>
        <listitem>
          <para>Specifies an abstract UNIX socket path, <varname>${PATTERN}</varname> specifies a path pattern.
          See <xref linkend="pattern-matching"/> for more information on path patterns.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>inet:${IPV4_ADDR}/${NETMASK}@${PORT_RANGE}</term>
        <listitem>
          <para>Specifies an IPV4 address. For more information, read the paragraph below.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>inet6:${IPV6_ADDR}/${NETMASK}@${PORT_RANGE}</term>
        <listitem>
          <para>Specifies an IPV6 address. For more information, read the paragraph below.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para><varname>/${NETMASK}</varname> may be omitted from <varname>inet:</varname> and <varname>inet6:</varname>
    addresses and <varname>${PORT_RANGE}</varname> can either be an integer or a service name from the
    <citerefentry><refentrytitle>services</refentrytitle><manvolnum>5</manvolnum></citerefentry> database in two forms.
    Either as as a single entity or as a range in the form BEGIN-END.</para>

    <para>In addition there are some aliases, you may use instead of specifying an address:</para>

    <variablelist>
      <varlistentry>
        <term><varname>LOOPBACK</varname></term>
        <listitem>
          <para>Expanded to <varname>inet:127.0.0.0/8</varname></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>LOOPBACK6</varname></term>
        <listitem>
          <para>Expanded to <varname>inet6:::1/8</varname></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>LOCAL</varname></term>
        <listitem>
          <para>Expanded to four addresses as defined in RFC1918:</para>
          <itemizedlist>
            <listitem><para><varname>inet:127.0.0.0/8</varname></para></listitem>
            <listitem><para><varname>inet:10.0.0.0/8</varname></para></listitem>
            <listitem><para><varname>inet:172.16.0.0/12</varname></para></listitem>
            <listitem><para><varname>inet:192.168.0.0/16</varname></para></listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>LOCAL6</varname></term>
        <listitem>
          <para>Expanded to four addresses:</para>
          <itemizedlist>
            <listitem><para><varname>inet6:::1</varname></para></listitem>
            <listitem><para><varname>inet6:fe80::/7</varname></para></listitem>
            <listitem><para><varname>inet6:fc00::/7</varname></para></listitem>
            <listitem><para><varname>inet6:fec0::/7</varname></para></listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 id="examples">
    <title>Examples</title>

    <para>Below are examples of invocation and configuration of Pandora's Box.</para>

    <refsect2 id="configuration-example">
      <title>Configuration File Example</title>

      <para>Below is a commented example configuration file:</para>

      <programlisting>
/* All configuration is specified in a JSON object enclosed in curly braces. */
{
    "core" :
        { "log"       : { "fd"        : 2    /* Messages with level higher than message go to standard error as well. */
                        , "file"      : ""   /* Specify a path or leave it empty for no file logging. */
                        , "level"     : 2    /* 0:fatal 1:warning 2:message 3:info 4:debug 5:trace */
                        , "timestamp" : true /* Prefix log messages with timestamp */
                        }
        , "sandbox"   : { "exec" : false /* execve(2) sandboxing */
                        , "path" : false /* path sandboxing */
                        , "sock" : false /* network sandboxing */
                        }
        , "allow"     : { "per_process_directories"     : true /* Allow per process directories like /proc/$pid */
                        , "successful_bind"             : true /* Add successful bind() address to connect() whitelist */
                        , "unsupported_socket_families" : true /* Allow unsupported socket families like AF_NETLINK */
                        }
        , "abort"     : { "decision" : "contall" /* Kill/Resume all children on fatal errors? (one of contall,killall) */
                        }
        , "panic"     : { "decision"  : "kill" /* What to do on panic? (one of cont,kill,contall,killall) */
                        , "exit_code" : -1     /* If decision is contall or killall, specifies the exit code. */
                        }
        , "violation" : { "decision"    : "deny" /* What to do on access violations? (one of deny,cont,kill,contall,killall) */
                        , "exit_code"   : -1     /* If decision is contall or killall, specifies the exit code. */
                        , "raise_fail" : false   /* Raise access violations for simple failures like path resolution errors? */
                        , "raise_safe" : false   /* Raise access violations for "safe" violations like -ENOTDIR for mkdir() */
                        }
        , "trace"     : { "followfork"    : true  /* Follow forks? */
                        , "exit_wait_all" : true  /* Wait all children to exit before exiting? */
                        , "magic_lock"    : "off" /* Initial state of the magic lock */
                        }
        },
    "exec" : { "resume_if_match" : [ ]
             , "kill_if_match"   : [ ]
             },

    "filter" :
        { "exec"  : [ ]
        , "path"  : [ ]
        , "sock"  : [ ]
        },

    "whitelist" :
        { "exec" : [ ]
        , "path" : [ "/dev/stdout"
                   , "/dev/stderr"
                   , "/dev/zero"
                   , "/dev/null"
                   , "/dev/full"
                   , "/dev/console"
                   , "/dev/random"
                   , "/dev/ptmx"
                   , "/dev/fd/***"
                   , "/dev/tty*"
                   , "/dev/pty*"
                   , "/dev/tts*"
                   , "/dev/pts*"
                   , "/proc/self/fd/***"
                   , "/dev/shm/***"
                   , "/selinux/context/***"
                   , "/proc/self/attr/***"
                   , "/proc/self/task/***"
                   , "/tmp/***"
                   , "/var/tmp/***"
                   , "/var/cache/***"
                   ]
        , "sock" :
            { "bind" : [ "LOOPBACK@0"
                       , "LOOPBACK@1024-65535"
                       , "LOOPBACK6@0"
                       , "LOOPBACK6@1024-65535"
                       ]
            , "connect" : [ "unix:/var/run/nscd/socket"
                          , "unix:/run/nscd/socket"
                          ]
            }
        }
}
      </programlisting>
    </refsect2>
  </refsect1>

  <refsect1 id="see-also">
    <title>See Also</title>
    <para>
      <citerefentry><refentrytitle>ptrace</refentrytitle><manvolnum>2</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>strace</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    </para>
  </refsect1>

  <refsect1 id="copyright">
    <title>COPYRIGHT</title>

    <simpara>Copyright &#169; 2010, 2011 Ali Polatel &lt;alip at exherbo dot org&gt;</simpara>
  </refsect1>
</refentry>
<!-- vim: set ts=2 sts=2 sw=2 tw=120 et nowrap spell spelllang=en : -->
